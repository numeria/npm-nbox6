declare const _sfc_main: import("vue").DefineComponent<{
    options: {
        type: ArrayConstructor;
        required: true;
    };
    valueKey: {
        type: StringConstructor;
        required: false;
    };
    textKey: {
        type: StringConstructor;
        required: false;
    };
}, {
    props: any;
    opts: import("vue").ComputedRef<{
        value: never;
        label: never;
    }[]>;
    readonly NSelect: import("vue").DefineComponent<{
        readonly to: {
            type: import("vue").PropType<string | boolean | HTMLElement>;
            default: undefined;
        };
        readonly bordered: {
            readonly type: import("vue").PropType<boolean | undefined>;
            readonly default: undefined;
        };
        readonly clearable: BooleanConstructor;
        readonly clearFilterAfterSelect: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly options: {
            readonly type: import("vue").PropType<import("naive-ui/es/select/src/interface").SelectMixedOption[]>;
            readonly default: () => never[];
        };
        readonly defaultValue: {
            readonly type: import("vue").PropType<import("naive-ui/es/select/src/interface").Value | null>;
            readonly default: null;
        };
        readonly value: import("vue").PropType<import("naive-ui/es/select/src/interface").Value | null>;
        readonly placeholder: StringConstructor;
        readonly menuProps: import("vue").PropType<import("vue").HTMLAttributes>;
        readonly multiple: BooleanConstructor;
        readonly size: import("vue").PropType<import("naive-ui/es/select/src/interface").Size>;
        readonly filterable: BooleanConstructor;
        readonly disabled: {
            readonly type: import("vue").PropType<boolean | undefined>;
            readonly default: undefined;
        };
        readonly remote: BooleanConstructor;
        readonly loading: BooleanConstructor;
        readonly filter: import("vue").PropType<import("naive-ui").SelectFilter>;
        readonly placement: {
            readonly type: import("vue").PropType<import("naive-ui").PopoverPlacement>;
            readonly default: "bottom-start";
        };
        readonly widthMode: {
            readonly type: StringConstructor;
            readonly default: "trigger";
        };
        readonly tag: BooleanConstructor;
        readonly onCreate: import("vue").PropType<(label: string) => import("naive-ui").SelectOption>;
        readonly fallbackOption: {
            readonly type: import("vue").PropType<false | import("naive-ui/es/select/src/interface").SelectFallbackOption | undefined>;
            readonly default: undefined;
        };
        readonly show: {
            readonly type: import("vue").PropType<boolean | undefined>;
            readonly default: undefined;
        };
        readonly showArrow: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly maxTagCount: import("vue").PropType<number | "responsive">;
        readonly consistentMenuWidth: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly virtualScroll: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly labelField: {
            readonly type: StringConstructor;
            readonly default: "label";
        };
        readonly valueField: {
            readonly type: StringConstructor;
            readonly default: "value";
        };
        readonly childrenField: {
            readonly type: StringConstructor;
            readonly default: "children";
        };
        readonly renderLabel: import("vue").PropType<import("naive-ui/es/_internal/select-menu/src/interface").RenderLabel>;
        readonly renderOption: import("vue").PropType<import("naive-ui/es/_internal/select-menu/src/interface").RenderOption>;
        readonly renderTag: import("vue").PropType<import("naive-ui").SelectRenderTag>;
        readonly 'onUpdate:value': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/select/src/interface").OnUpdateValue> | undefined>;
        readonly inputProps: import("vue").PropType<import("vue").InputHTMLAttributes>;
        readonly nodeProps: import("vue").PropType<import("naive-ui").SelectNodeProps>;
        readonly ignoreComposition: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly showOnFocus: BooleanConstructor;
        readonly onUpdateValue: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/select/src/interface").OnUpdateValue> | undefined>;
        readonly onBlur: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(e: FocusEvent) => void> | undefined>;
        readonly onClear: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<() => void> | undefined>;
        readonly onFocus: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(e: FocusEvent) => void> | undefined>;
        readonly onScroll: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(e: Event) => void> | undefined>;
        readonly onSearch: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: string) => void> | undefined>;
        readonly onUpdateShow: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
        readonly 'onUpdate:show': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
        readonly displayDirective: {
            readonly type: import("vue").PropType<"show" | "if">;
            readonly default: "show";
        };
        readonly resetMenuOnOptionsChange: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly status: import("vue").PropType<import("naive-ui/es/form/src/interface").FormValidationStatus>;
        readonly showCheckmark: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly onChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/select/src/interface").OnUpdateValue>>;
        readonly items: import("vue").PropType<import("naive-ui/es/select/src/interface").SelectMixedOption[]>;
        readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Select", {
            menuBoxShadow: string;
        }, {
            InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadius: string;
                textColor: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorActive: string;
                border: string;
                borderHover: string;
                borderActive: string;
                borderFocus: string;
                boxShadowHover: string;
                boxShadowActive: string;
                boxShadowFocus: string;
                caretColor: string;
                arrowColor: string;
                arrowColorDisabled: string;
                loadingColor: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderActiveWarning: string;
                borderFocusWarning: string;
                boxShadowHoverWarning: string;
                boxShadowActiveWarning: string;
                boxShadowFocusWarning: string;
                colorActiveWarning: string;
                caretColorWarning: string;
                borderError: string;
                borderHoverError: string;
                borderActiveError: string;
                borderFocusError: string;
                boxShadowHoverError: string;
                boxShadowActiveError: string;
                boxShadowFocusError: string;
                colorActiveError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                paddingSingle: string;
                paddingMultiple: string;
                clearSize: string;
                arrowSize: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                optionFontSizeSmall: string;
                optionFontSizeMedium: string;
                optionFontSizeLarge: string;
                optionFontSizeHuge: string;
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                color: string;
                groupHeaderTextColor: string;
                actionDividerColor: string;
                optionTextColor: string;
                optionTextColorPressed: string;
                optionTextColorDisabled: string;
                optionTextColorActive: string;
                optionOpacityDisabled: string;
                optionCheckColor: string;
                optionColorPending: string;
                optionColorActive: string;
                optionColorActivePending: string;
                actionTextColor: string;
                loadingColor: string;
                height: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingHuge: string;
                optionPaddingSmall: string;
                optionPaddingMedium: string;
                optionPaddingLarge: string;
                optionPaddingHuge: string;
                loadingSize: string;
            }, {
                Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                    color: string;
                    colorHover: string;
                }, any>;
                Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    fontSizeHuge: string;
                    textColor: string;
                    iconColor: string;
                    extraTextColor: string;
                    iconSizeSmall: string;
                    iconSizeMedium: string;
                    iconSizeLarge: string;
                    iconSizeHuge: string;
                }, any>;
            }>;
        }>>;
        readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Select", {
            menuBoxShadow: string;
        }, {
            InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadius: string;
                textColor: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorActive: string;
                border: string;
                borderHover: string;
                borderActive: string;
                borderFocus: string;
                boxShadowHover: string;
                boxShadowActive: string;
                boxShadowFocus: string;
                caretColor: string;
                arrowColor: string;
                arrowColorDisabled: string;
                loadingColor: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderActiveWarning: string;
                borderFocusWarning: string;
                boxShadowHoverWarning: string;
                boxShadowActiveWarning: string;
                boxShadowFocusWarning: string;
                colorActiveWarning: string;
                caretColorWarning: string;
                borderError: string;
                borderHoverError: string;
                borderActiveError: string;
                borderFocusError: string;
                boxShadowHoverError: string;
                boxShadowActiveError: string;
                boxShadowFocusError: string;
                colorActiveError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                paddingSingle: string;
                paddingMultiple: string;
                clearSize: string;
                arrowSize: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                optionFontSizeSmall: string;
                optionFontSizeMedium: string;
                optionFontSizeLarge: string;
                optionFontSizeHuge: string;
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                color: string;
                groupHeaderTextColor: string;
                actionDividerColor: string;
                optionTextColor: string;
                optionTextColorPressed: string;
                optionTextColorDisabled: string;
                optionTextColorActive: string;
                optionOpacityDisabled: string;
                optionCheckColor: string;
                optionColorPending: string;
                optionColorActive: string;
                optionColorActivePending: string;
                actionTextColor: string;
                loadingColor: string;
                height: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingHuge: string;
                optionPaddingSmall: string;
                optionPaddingMedium: string;
                optionPaddingLarge: string;
                optionPaddingHuge: string;
                loadingSize: string;
            }, {
                Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                    color: string;
                    colorHover: string;
                }, any>;
                Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    fontSizeHuge: string;
                    textColor: string;
                    iconColor: string;
                    extraTextColor: string;
                    iconSizeSmall: string;
                    iconSizeMedium: string;
                    iconSizeLarge: string;
                    iconSizeHuge: string;
                }, any>;
            }>;
        }>>>;
        readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Select", {
            menuBoxShadow: string;
        }, {
            InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadius: string;
                textColor: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorActive: string;
                border: string;
                borderHover: string;
                borderActive: string;
                borderFocus: string;
                boxShadowHover: string;
                boxShadowActive: string;
                boxShadowFocus: string;
                caretColor: string;
                arrowColor: string;
                arrowColorDisabled: string;
                loadingColor: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderActiveWarning: string;
                borderFocusWarning: string;
                boxShadowHoverWarning: string;
                boxShadowActiveWarning: string;
                boxShadowFocusWarning: string;
                colorActiveWarning: string;
                caretColorWarning: string;
                borderError: string;
                borderHoverError: string;
                borderActiveError: string;
                borderFocusError: string;
                boxShadowHoverError: string;
                boxShadowActiveError: string;
                boxShadowFocusError: string;
                colorActiveError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                paddingSingle: string;
                paddingMultiple: string;
                clearSize: string;
                arrowSize: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                optionFontSizeSmall: string;
                optionFontSizeMedium: string;
                optionFontSizeLarge: string;
                optionFontSizeHuge: string;
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                color: string;
                groupHeaderTextColor: string;
                actionDividerColor: string;
                optionTextColor: string;
                optionTextColorPressed: string;
                optionTextColorDisabled: string;
                optionTextColorActive: string;
                optionOpacityDisabled: string;
                optionCheckColor: string;
                optionColorPending: string;
                optionColorActive: string;
                optionColorActivePending: string;
                actionTextColor: string;
                loadingColor: string;
                height: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingHuge: string;
                optionPaddingSmall: string;
                optionPaddingMedium: string;
                optionPaddingLarge: string;
                optionPaddingHuge: string;
                loadingSize: string;
            }, {
                Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                    color: string;
                    colorHover: string;
                }, any>;
                Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    fontSizeHuge: string;
                    textColor: string;
                    iconColor: string;
                    extraTextColor: string;
                    iconSizeSmall: string;
                    iconSizeMedium: string;
                    iconSizeLarge: string;
                    iconSizeHuge: string;
                }, any>;
            }>;
        }>>>;
    }, {
        mergedStatus: import("vue").ComputedRef<import("naive-ui/es/form/src/interface").FormValidationStatus | undefined>;
        mergedClsPrefix: import("vue").ComputedRef<string>;
        mergedBordered: import("vue").ComputedRef<boolean>;
        namespace: import("vue").ComputedRef<string | undefined>;
        treeMate: import("vue").ComputedRef<import("treemate").TreeMate<import("naive-ui").SelectOption, import("naive-ui").SelectGroupOption, import("naive-ui/es/select/src/interface").SelectIgnoredOption>>;
        isMounted: Readonly<import("vue").Ref<boolean>>;
        triggerRef: import("vue").Ref<{
            isComposing: boolean;
            focus: () => void;
            focusInput: () => void;
            blur: () => void;
            $el: HTMLElement;
        } | null>;
        menuRef: import("vue").Ref<{
            selfRef: HTMLElement | null;
            getPendingTmNode: () => import("treemate").TreeNode<import("naive-ui/es/select/src/interface").SelectBaseOption<string | number, string | ((option: import("naive-ui/es/select/src/interface").SelectBaseOption<string | number, any>, selected: boolean) => import("vue").VNodeChild)>, import("naive-ui/es/select/src/interface").SelectBaseOption<string | number, string | ((option: import("naive-ui/es/select/src/interface").SelectBaseOption<string | number, any>, selected: boolean) => import("vue").VNodeChild)>, import("naive-ui/es/select/src/interface").SelectBaseOption<string | number, string | ((option: import("naive-ui/es/select/src/interface").SelectBaseOption<string | number, any>, selected: boolean) => import("vue").VNodeChild)>> | null;
            prev: () => void;
            next: () => void;
        } | null>;
        pattern: import("vue").Ref<string>;
        uncontrolledShow: import("vue").Ref<boolean>;
        mergedShow: import("vue").ComputedRef<boolean>;
        adjustedTo: import("vue").ComputedRef<string | HTMLElement>;
        uncontrolledValue: import("vue").Ref<string[] | number[] | import("naive-ui/es/select/src/interface").ValueAtom | import("naive-ui/es/select/src/interface").ValueAtom[] | null>;
        mergedValue: import("vue").ComputedRef<string[] | number[] | import("naive-ui/es/select/src/interface").ValueAtom | import("naive-ui/es/select/src/interface").ValueAtom[] | null>;
        followerRef: import("vue").Ref<{
            syncPosition: () => void;
        } | null>;
        localizedPlaceholder: import("vue").ComputedRef<string>;
        selectedOption: import("vue").ComputedRef<import("naive-ui").SelectOption | null>;
        selectedOptions: import("vue").ComputedRef<import("naive-ui").SelectOption[] | null>;
        mergedSize: import("vue").ComputedRef<"small" | "tiny" | "medium" | "large">;
        mergedDisabled: import("vue").ComputedRef<boolean>;
        focused: import("vue").Ref<boolean>;
        activeWithoutMenuOpen: import("vue").Ref<boolean>;
        inlineThemeDisabled: boolean | undefined;
        onTriggerInputFocus: () => void;
        onTriggerInputBlur: () => void;
        handleTriggerOrMenuResize: () => void;
        handleMenuFocus: (e: FocusEvent) => void;
        handleMenuBlur: (e: FocusEvent) => void;
        handleMenuTabOut: () => void;
        handleTriggerClick: () => void;
        handleToggle: (tmNode: import("treemate").TreeNode<import("naive-ui").SelectOption, import("naive-ui").SelectOption, import("naive-ui").SelectOption>) => void;
        handleDeleteOption: (option: import("naive-ui").SelectOption) => void;
        handlePatternInput: (e: InputEvent) => void;
        handleClear: (e: MouseEvent) => void;
        handleTriggerBlur: (e: FocusEvent) => void;
        handleTriggerFocus: (e: FocusEvent) => void;
        handleKeydown: (e: KeyboardEvent) => void;
        handleMenuAfterLeave: () => void;
        handleMenuClickOutside: (e: MouseEvent) => void;
        handleMenuScroll: (e: Event) => void;
        handleMenuKeydown: (e: KeyboardEvent) => void;
        handleMenuMousedown: (e: MouseEvent) => void;
        mergedTheme: import("vue").ComputedRef<{
            common: {
                baseColor: string;
                primaryColor: string;
                primaryColorHover: string;
                primaryColorPressed: string;
                primaryColorSuppl: string;
                infoColor: string;
                infoColorHover: string;
                infoColorPressed: string;
                infoColorSuppl: string;
                successColor: string;
                successColorHover: string;
                successColorPressed: string;
                successColorSuppl: string;
                warningColor: string;
                warningColorHover: string;
                warningColorPressed: string;
                warningColorSuppl: string;
                errorColor: string;
                errorColorHover: string;
                errorColorPressed: string;
                errorColorSuppl: string;
                textColorBase: string;
                textColor1: string;
                textColor2: string;
                textColor3: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                iconColor: string;
                iconColorHover: string;
                iconColorPressed: string;
                iconColorDisabled: string;
                opacity1: string;
                opacity2: string;
                opacity3: string;
                opacity4: string;
                opacity5: string;
                dividerColor: string;
                borderColor: string;
                closeIconColor: string;
                closeIconColorHover: string;
                closeIconColorPressed: string;
                closeColorHover: string;
                closeColorPressed: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                scrollbarColor: string;
                scrollbarColorHover: string;
                scrollbarWidth: string;
                scrollbarHeight: string;
                scrollbarBorderRadius: string;
                progressRailColor: string;
                railColor: string;
                popoverColor: string;
                tableColor: string;
                cardColor: string;
                modalColor: string;
                bodyColor: string;
                tagColor: string;
                avatarColor: string;
                invertedColor: string;
                inputColor: string;
                codeColor: string;
                tabColor: string;
                actionColor: string;
                tableHeaderColor: string;
                hoverColor: string;
                tableColorHover: string;
                tableColorStriped: string;
                pressedColor: string;
                opacityDisabled: string;
                inputColorDisabled: string;
                buttonColor2: string;
                buttonColor2Hover: string;
                buttonColor2Pressed: string;
                boxShadow1: string;
                boxShadow2: string;
                boxShadow3: string;
                fontFamily: string;
                fontFamilyMono: string;
                fontWeight: string;
                fontWeightStrong: string;
                cubicBezierEaseInOut: string;
                cubicBezierEaseOut: string;
                cubicBezierEaseIn: string;
                borderRadius: string;
                borderRadiusSmall: string;
                fontSize: string;
                fontSizeMini: string;
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                fontSizeHuge: string;
                lineHeight: string;
                heightMini: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                heightHuge: string;
                name: "common";
            };
            self: {
                menuBoxShadow: string;
            };
            peers: {
                InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                    fontSizeTiny: string;
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    heightTiny: string;
                    heightSmall: string;
                    heightMedium: string;
                    heightLarge: string;
                    borderRadius: string;
                    textColor: string;
                    textColorDisabled: string;
                    placeholderColor: string;
                    placeholderColorDisabled: string;
                    color: string;
                    colorDisabled: string;
                    colorActive: string;
                    border: string;
                    borderHover: string;
                    borderActive: string;
                    borderFocus: string;
                    boxShadowHover: string;
                    boxShadowActive: string;
                    boxShadowFocus: string;
                    caretColor: string;
                    arrowColor: string;
                    arrowColorDisabled: string;
                    loadingColor: string;
                    borderWarning: string;
                    borderHoverWarning: string;
                    borderActiveWarning: string;
                    borderFocusWarning: string;
                    boxShadowHoverWarning: string;
                    boxShadowActiveWarning: string;
                    boxShadowFocusWarning: string;
                    colorActiveWarning: string;
                    caretColorWarning: string;
                    borderError: string;
                    borderHoverError: string;
                    borderActiveError: string;
                    borderFocusError: string;
                    boxShadowHoverError: string;
                    boxShadowActiveError: string;
                    boxShadowFocusError: string;
                    colorActiveError: string;
                    caretColorError: string;
                    clearColor: string;
                    clearColorHover: string;
                    clearColorPressed: string;
                    paddingSingle: string;
                    paddingMultiple: string;
                    clearSize: string;
                    arrowSize: string;
                }, {
                    Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                        fontSize: string;
                        borderRadius: string;
                        color: string;
                        dividerColor: string;
                        textColor: string;
                        boxShadow: string;
                        space: string;
                        spaceArrow: string;
                        arrowOffset: string;
                        arrowOffsetVertical: string;
                        arrowHeight: string;
                        padding: string;
                    }, any>;
                }>;
                InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                    optionFontSizeSmall: string;
                    optionFontSizeMedium: string;
                    optionFontSizeLarge: string;
                    optionFontSizeHuge: string;
                    optionHeightSmall: string;
                    optionHeightMedium: string;
                    optionHeightLarge: string;
                    optionHeightHuge: string;
                    borderRadius: string;
                    color: string;
                    groupHeaderTextColor: string;
                    actionDividerColor: string;
                    optionTextColor: string;
                    optionTextColorPressed: string;
                    optionTextColorDisabled: string;
                    optionTextColorActive: string;
                    optionOpacityDisabled: string;
                    optionCheckColor: string;
                    optionColorPending: string;
                    optionColorActive: string;
                    optionColorActivePending: string;
                    actionTextColor: string;
                    loadingColor: string;
                    height: string;
                    paddingSmall: string;
                    paddingMedium: string;
                    paddingLarge: string;
                    paddingHuge: string;
                    optionPaddingSmall: string;
                    optionPaddingMedium: string;
                    optionPaddingLarge: string;
                    optionPaddingHuge: string;
                    loadingSize: string;
                }, {
                    Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                        color: string;
                        colorHover: string;
                    }, any>;
                    Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                        fontSizeSmall: string;
                        fontSizeMedium: string;
                        fontSizeLarge: string;
                        fontSizeHuge: string;
                        textColor: string;
                        iconColor: string;
                        extraTextColor: string;
                        iconSizeSmall: string;
                        iconSizeMedium: string;
                        iconSizeLarge: string;
                        iconSizeHuge: string;
                    }, any>;
                }>;
            };
            peerOverrides: {
                InternalSelection?: {
                    peers?: {
                        Popover?: import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Popover", {
                            fontSize: string;
                            borderRadius: string;
                            color: string;
                            dividerColor: string;
                            textColor: string;
                            boxShadow: string;
                            space: string;
                            spaceArrow: string;
                            arrowOffset: string;
                            arrowOffsetVertical: string;
                            arrowHeight: string;
                            padding: string;
                        }, any>> | undefined;
                    } | undefined;
                } | undefined;
                InternalSelectMenu?: {
                    peers?: {
                        Scrollbar?: import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                            color: string;
                            colorHover: string;
                        }, any>> | undefined;
                        Empty?: import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Empty", {
                            fontSizeSmall: string;
                            fontSizeMedium: string;
                            fontSizeLarge: string;
                            fontSizeHuge: string;
                            textColor: string;
                            iconColor: string;
                            extraTextColor: string;
                            iconSizeSmall: string;
                            iconSizeMedium: string;
                            iconSizeLarge: string;
                            iconSizeHuge: string;
                        }, any>> | undefined;
                    } | undefined;
                } | undefined;
            };
        }>;
        cssVars: import("vue").ComputedRef<{
            '--n-menu-box-shadow': string;
        }> | undefined;
        themeClass: import("vue").Ref<string> | undefined;
        onRender: (() => void) | undefined;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly to: {
            type: import("vue").PropType<string | boolean | HTMLElement>;
            default: undefined;
        };
        readonly bordered: {
            readonly type: import("vue").PropType<boolean | undefined>;
            readonly default: undefined;
        };
        readonly clearable: BooleanConstructor;
        readonly clearFilterAfterSelect: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly options: {
            readonly type: import("vue").PropType<import("naive-ui/es/select/src/interface").SelectMixedOption[]>;
            readonly default: () => never[];
        };
        readonly defaultValue: {
            readonly type: import("vue").PropType<import("naive-ui/es/select/src/interface").Value | null>;
            readonly default: null;
        };
        readonly value: import("vue").PropType<import("naive-ui/es/select/src/interface").Value | null>;
        readonly placeholder: StringConstructor;
        readonly menuProps: import("vue").PropType<import("vue").HTMLAttributes>;
        readonly multiple: BooleanConstructor;
        readonly size: import("vue").PropType<import("naive-ui/es/select/src/interface").Size>;
        readonly filterable: BooleanConstructor;
        readonly disabled: {
            readonly type: import("vue").PropType<boolean | undefined>;
            readonly default: undefined;
        };
        readonly remote: BooleanConstructor;
        readonly loading: BooleanConstructor;
        readonly filter: import("vue").PropType<import("naive-ui").SelectFilter>;
        readonly placement: {
            readonly type: import("vue").PropType<import("naive-ui").PopoverPlacement>;
            readonly default: "bottom-start";
        };
        readonly widthMode: {
            readonly type: StringConstructor;
            readonly default: "trigger";
        };
        readonly tag: BooleanConstructor;
        readonly onCreate: import("vue").PropType<(label: string) => import("naive-ui").SelectOption>;
        readonly fallbackOption: {
            readonly type: import("vue").PropType<false | import("naive-ui/es/select/src/interface").SelectFallbackOption | undefined>;
            readonly default: undefined;
        };
        readonly show: {
            readonly type: import("vue").PropType<boolean | undefined>;
            readonly default: undefined;
        };
        readonly showArrow: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly maxTagCount: import("vue").PropType<number | "responsive">;
        readonly consistentMenuWidth: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly virtualScroll: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly labelField: {
            readonly type: StringConstructor;
            readonly default: "label";
        };
        readonly valueField: {
            readonly type: StringConstructor;
            readonly default: "value";
        };
        readonly childrenField: {
            readonly type: StringConstructor;
            readonly default: "children";
        };
        readonly renderLabel: import("vue").PropType<import("naive-ui/es/_internal/select-menu/src/interface").RenderLabel>;
        readonly renderOption: import("vue").PropType<import("naive-ui/es/_internal/select-menu/src/interface").RenderOption>;
        readonly renderTag: import("vue").PropType<import("naive-ui").SelectRenderTag>;
        readonly 'onUpdate:value': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/select/src/interface").OnUpdateValue> | undefined>;
        readonly inputProps: import("vue").PropType<import("vue").InputHTMLAttributes>;
        readonly nodeProps: import("vue").PropType<import("naive-ui").SelectNodeProps>;
        readonly ignoreComposition: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly showOnFocus: BooleanConstructor;
        readonly onUpdateValue: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/select/src/interface").OnUpdateValue> | undefined>;
        readonly onBlur: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(e: FocusEvent) => void> | undefined>;
        readonly onClear: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<() => void> | undefined>;
        readonly onFocus: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(e: FocusEvent) => void> | undefined>;
        readonly onScroll: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(e: Event) => void> | undefined>;
        readonly onSearch: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: string) => void> | undefined>;
        readonly onUpdateShow: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
        readonly 'onUpdate:show': import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<(value: boolean) => void>>;
        readonly displayDirective: {
            readonly type: import("vue").PropType<"show" | "if">;
            readonly default: "show";
        };
        readonly resetMenuOnOptionsChange: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly status: import("vue").PropType<import("naive-ui/es/form/src/interface").FormValidationStatus>;
        readonly showCheckmark: {
            readonly type: BooleanConstructor;
            readonly default: true;
        };
        readonly onChange: import("vue").PropType<import("naive-ui/es/_utils").MaybeArray<import("naive-ui/es/select/src/interface").OnUpdateValue>>;
        readonly items: import("vue").PropType<import("naive-ui/es/select/src/interface").SelectMixedOption[]>;
        readonly theme: import("vue").PropType<import("naive-ui/es/_mixins").Theme<"Select", {
            menuBoxShadow: string;
        }, {
            InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadius: string;
                textColor: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorActive: string;
                border: string;
                borderHover: string;
                borderActive: string;
                borderFocus: string;
                boxShadowHover: string;
                boxShadowActive: string;
                boxShadowFocus: string;
                caretColor: string;
                arrowColor: string;
                arrowColorDisabled: string;
                loadingColor: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderActiveWarning: string;
                borderFocusWarning: string;
                boxShadowHoverWarning: string;
                boxShadowActiveWarning: string;
                boxShadowFocusWarning: string;
                colorActiveWarning: string;
                caretColorWarning: string;
                borderError: string;
                borderHoverError: string;
                borderActiveError: string;
                borderFocusError: string;
                boxShadowHoverError: string;
                boxShadowActiveError: string;
                boxShadowFocusError: string;
                colorActiveError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                paddingSingle: string;
                paddingMultiple: string;
                clearSize: string;
                arrowSize: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                optionFontSizeSmall: string;
                optionFontSizeMedium: string;
                optionFontSizeLarge: string;
                optionFontSizeHuge: string;
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                color: string;
                groupHeaderTextColor: string;
                actionDividerColor: string;
                optionTextColor: string;
                optionTextColorPressed: string;
                optionTextColorDisabled: string;
                optionTextColorActive: string;
                optionOpacityDisabled: string;
                optionCheckColor: string;
                optionColorPending: string;
                optionColorActive: string;
                optionColorActivePending: string;
                actionTextColor: string;
                loadingColor: string;
                height: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingHuge: string;
                optionPaddingSmall: string;
                optionPaddingMedium: string;
                optionPaddingLarge: string;
                optionPaddingHuge: string;
                loadingSize: string;
            }, {
                Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                    color: string;
                    colorHover: string;
                }, any>;
                Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    fontSizeHuge: string;
                    textColor: string;
                    iconColor: string;
                    extraTextColor: string;
                    iconSizeSmall: string;
                    iconSizeMedium: string;
                    iconSizeLarge: string;
                    iconSizeHuge: string;
                }, any>;
            }>;
        }>>;
        readonly themeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Select", {
            menuBoxShadow: string;
        }, {
            InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadius: string;
                textColor: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorActive: string;
                border: string;
                borderHover: string;
                borderActive: string;
                borderFocus: string;
                boxShadowHover: string;
                boxShadowActive: string;
                boxShadowFocus: string;
                caretColor: string;
                arrowColor: string;
                arrowColorDisabled: string;
                loadingColor: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderActiveWarning: string;
                borderFocusWarning: string;
                boxShadowHoverWarning: string;
                boxShadowActiveWarning: string;
                boxShadowFocusWarning: string;
                colorActiveWarning: string;
                caretColorWarning: string;
                borderError: string;
                borderHoverError: string;
                borderActiveError: string;
                borderFocusError: string;
                boxShadowHoverError: string;
                boxShadowActiveError: string;
                boxShadowFocusError: string;
                colorActiveError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                paddingSingle: string;
                paddingMultiple: string;
                clearSize: string;
                arrowSize: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                optionFontSizeSmall: string;
                optionFontSizeMedium: string;
                optionFontSizeLarge: string;
                optionFontSizeHuge: string;
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                color: string;
                groupHeaderTextColor: string;
                actionDividerColor: string;
                optionTextColor: string;
                optionTextColorPressed: string;
                optionTextColorDisabled: string;
                optionTextColorActive: string;
                optionOpacityDisabled: string;
                optionCheckColor: string;
                optionColorPending: string;
                optionColorActive: string;
                optionColorActivePending: string;
                actionTextColor: string;
                loadingColor: string;
                height: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingHuge: string;
                optionPaddingSmall: string;
                optionPaddingMedium: string;
                optionPaddingLarge: string;
                optionPaddingHuge: string;
                loadingSize: string;
            }, {
                Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                    color: string;
                    colorHover: string;
                }, any>;
                Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    fontSizeHuge: string;
                    textColor: string;
                    iconColor: string;
                    extraTextColor: string;
                    iconSizeSmall: string;
                    iconSizeMedium: string;
                    iconSizeLarge: string;
                    iconSizeHuge: string;
                }, any>;
            }>;
        }>>>;
        readonly builtinThemeOverrides: import("vue").PropType<import("naive-ui/es/_mixins/use-theme").ExtractThemeOverrides<import("naive-ui/es/_mixins").Theme<"Select", {
            menuBoxShadow: string;
        }, {
            InternalSelection: import("naive-ui/es/_mixins").Theme<"InternalSelection", {
                fontSizeTiny: string;
                fontSizeSmall: string;
                fontSizeMedium: string;
                fontSizeLarge: string;
                heightTiny: string;
                heightSmall: string;
                heightMedium: string;
                heightLarge: string;
                borderRadius: string;
                textColor: string;
                textColorDisabled: string;
                placeholderColor: string;
                placeholderColorDisabled: string;
                color: string;
                colorDisabled: string;
                colorActive: string;
                border: string;
                borderHover: string;
                borderActive: string;
                borderFocus: string;
                boxShadowHover: string;
                boxShadowActive: string;
                boxShadowFocus: string;
                caretColor: string;
                arrowColor: string;
                arrowColorDisabled: string;
                loadingColor: string;
                borderWarning: string;
                borderHoverWarning: string;
                borderActiveWarning: string;
                borderFocusWarning: string;
                boxShadowHoverWarning: string;
                boxShadowActiveWarning: string;
                boxShadowFocusWarning: string;
                colorActiveWarning: string;
                caretColorWarning: string;
                borderError: string;
                borderHoverError: string;
                borderActiveError: string;
                borderFocusError: string;
                boxShadowHoverError: string;
                boxShadowActiveError: string;
                boxShadowFocusError: string;
                colorActiveError: string;
                caretColorError: string;
                clearColor: string;
                clearColorHover: string;
                clearColorPressed: string;
                paddingSingle: string;
                paddingMultiple: string;
                clearSize: string;
                arrowSize: string;
            }, {
                Popover: import("naive-ui/es/_mixins").Theme<"Popover", {
                    fontSize: string;
                    borderRadius: string;
                    color: string;
                    dividerColor: string;
                    textColor: string;
                    boxShadow: string;
                    space: string;
                    spaceArrow: string;
                    arrowOffset: string;
                    arrowOffsetVertical: string;
                    arrowHeight: string;
                    padding: string;
                }, any>;
            }>;
            InternalSelectMenu: import("naive-ui/es/_mixins").Theme<"InternalSelectMenu", {
                optionFontSizeSmall: string;
                optionFontSizeMedium: string;
                optionFontSizeLarge: string;
                optionFontSizeHuge: string;
                optionHeightSmall: string;
                optionHeightMedium: string;
                optionHeightLarge: string;
                optionHeightHuge: string;
                borderRadius: string;
                color: string;
                groupHeaderTextColor: string;
                actionDividerColor: string;
                optionTextColor: string;
                optionTextColorPressed: string;
                optionTextColorDisabled: string;
                optionTextColorActive: string;
                optionOpacityDisabled: string;
                optionCheckColor: string;
                optionColorPending: string;
                optionColorActive: string;
                optionColorActivePending: string;
                actionTextColor: string;
                loadingColor: string;
                height: string;
                paddingSmall: string;
                paddingMedium: string;
                paddingLarge: string;
                paddingHuge: string;
                optionPaddingSmall: string;
                optionPaddingMedium: string;
                optionPaddingLarge: string;
                optionPaddingHuge: string;
                loadingSize: string;
            }, {
                Scrollbar: import("naive-ui/es/_mixins").Theme<"Scrollbar", {
                    color: string;
                    colorHover: string;
                }, any>;
                Empty: import("naive-ui/es/_mixins").Theme<"Empty", {
                    fontSizeSmall: string;
                    fontSizeMedium: string;
                    fontSizeLarge: string;
                    fontSizeHuge: string;
                    textColor: string;
                    iconColor: string;
                    extraTextColor: string;
                    iconSizeSmall: string;
                    iconSizeMedium: string;
                    iconSizeLarge: string;
                    iconSizeHuge: string;
                }, any>;
            }>;
        }>>>;
    }>>, {
        readonly tag: boolean;
        readonly show: boolean | undefined;
        readonly multiple: boolean;
        readonly disabled: boolean | undefined;
        readonly to: string | boolean | HTMLElement;
        readonly options: import("naive-ui/es/select/src/interface").SelectMixedOption[];
        readonly loading: boolean;
        readonly bordered: boolean | undefined;
        readonly placement: import("naive-ui").PopoverPlacement;
        readonly showCheckmark: boolean;
        readonly labelField: string;
        readonly virtualScroll: boolean;
        readonly valueField: string;
        readonly resetMenuOnOptionsChange: boolean;
        readonly showArrow: boolean;
        readonly displayDirective: "show" | "if";
        readonly filterable: boolean;
        readonly clearable: boolean;
        readonly ignoreComposition: boolean;
        readonly clearFilterAfterSelect: boolean;
        readonly defaultValue: import("naive-ui/es/select/src/interface").Value | null;
        readonly remote: boolean;
        readonly widthMode: string;
        readonly fallbackOption: false | import("naive-ui/es/select/src/interface").SelectFallbackOption | undefined;
        readonly consistentMenuWidth: boolean;
        readonly childrenField: string;
        readonly showOnFocus: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: ArrayConstructor;
        required: true;
    };
    valueKey: {
        type: StringConstructor;
        required: false;
    };
    textKey: {
        type: StringConstructor;
        required: false;
    };
}>>, {}>;
export default _sfc_main;
